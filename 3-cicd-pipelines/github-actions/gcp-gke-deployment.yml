name: 'Deploy to Google Kubernetes Engine'

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - 'docs/**'
      - '*.md'
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: false
        type: boolean

env:
  PROJECT_ID: my-gcp-project
  GAR_LOCATION: asia-southeast2
  GKE_CLUSTER: prod-cluster
  GKE_ZONE: asia-southeast2
  DEPLOYMENT_NAME: web-application
  REPOSITORY: web-app
  IMAGE: web-app

permissions:
  contents: read
  id-token: write
  security-events: write
  pull-requests: write

jobs:
  # Setup and determine deployment parameters
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      deploy: ${{ steps.env.outputs.deploy }}
      image_tag: ${{ steps.env.outputs.image_tag }}
      namespace: ${{ steps.env.outputs.namespace }}
      cluster_name: ${{ steps.env.outputs.cluster_name }}
    steps:
      - name: Determine Environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            DEPLOY="true"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENVIRONMENT="prod"
            DEPLOY="true"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            ENVIRONMENT="staging"
            DEPLOY="true"
          else
            ENVIRONMENT="dev"
            DEPLOY="false"
          fi
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "deploy=$DEPLOY" >> $GITHUB_OUTPUT
          echo "image_tag=$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_OUTPUT
          echo "namespace=${ENVIRONMENT}-${DEPLOYMENT_NAME}" >> $GITHUB_OUTPUT
          
          # Set cluster name based on environment
          case $ENVIRONMENT in
            prod)
              echo "cluster_name=prod-cluster" >> $GITHUB_OUTPUT
              ;;
            staging)
              echo "cluster_name=staging-cluster" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "cluster_name=dev-cluster" >> $GITHUB_OUTPUT
              ;;
          esac

  # Build and push container image
  build:
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      image_url: ${{ steps.build.outputs.image_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.setup.outputs.image_tag }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ needs.setup.outputs.image_tag }}
            ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            ENVIRONMENT=${{ needs.setup.outputs.environment }}
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}

      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ needs.setup.outputs.image_tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to GKE
  deploy:
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.deploy == 'true'
    environment: 
      name: ${{ needs.setup.outputs.environment }}
      url: ${{ steps.get-url.outputs.service_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install gke-gcloud-auth-plugin
        run: |
          sudo apt-get update
          sudo apt-get install apt-transport-https ca-certificates gnupg curl -y
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          sudo apt-get update && sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin -y

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ needs.setup.outputs.cluster_name }} \
            --region ${{ env.GKE_ZONE }} \
            --project ${{ env.PROJECT_ID }}

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Add Helm repositories
        run: |
          helm repo add stable https://charts.helm.sh/stable
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Create namespace
        run: |
          kubectl create namespace ${{ needs.setup.outputs.namespace }} --dry-run=client -o yaml | kubectl apply -f -
          kubectl label namespace ${{ needs.setup.outputs.namespace }} \
            environment=${{ needs.setup.outputs.environment }} \
            managed-by=github-actions \
            --overwrite

      - name: Generate SecretProviderClass with up-to-date secrets
        id: generate-spc
        env:
          PROJECT_ID: ${{ env.PROJECT_ID }}
          SECRET_NAME: ${{ needs.setup.outputs.environment }}-${{ env.DEPLOYMENT_NAME }}-secrets
          NAMESPACE: ${{ needs.setup.outputs.namespace }}
        run: |
          # Get all secret keys from Google Secret Manager
          KEYS=$(gcloud secrets versions access latest --secret="$SECRET_NAME" | jq -r 'keys[]' 2>/dev/null || echo "")
          
          if [[ -n "$KEYS" ]]; then
            cat > spc.yaml <<EOF
          apiVersion: secrets-store.csi.x-k8s.io/v1
          kind: SecretProviderClass
          metadata:
            name: ${{ env.DEPLOYMENT_NAME }}-secrets
            namespace: $NAMESPACE
          spec:
            provider: gcp
            parameters:
              secrets: |
                - resourceName: "projects/$PROJECT_ID/secrets/$SECRET_NAME/versions/latest"
                  path: "config.json"
            secretObjects:
            - secretName: ${{ env.DEPLOYMENT_NAME }}-secrets
              type: Opaque
              data:
          EOF
            
            for key in $KEYS; do
              echo "      - objectName: ${key}" >> spc.yaml
              echo "        key: ${key}" >> spc.yaml
            done
            
            kubectl apply -f spc.yaml
            echo "SecretProviderClass created successfully"
          else
            echo "No secrets found or secret does not exist, skipping SecretProviderClass creation"
          fi

      - name: Deploy with Helm
        run: |
          helm upgrade --install ${{ env.DEPLOYMENT_NAME }} \
            ./2-container-orchestration/kubernetes-gke/helm-charts/web-application \
            --namespace ${{ needs.setup.outputs.namespace }} \
            --set image.repository=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }} \
            --set image.tag=${{ needs.setup.outputs.image_tag }} \
            --set environment=${{ needs.setup.outputs.environment }} \
            --set nameOverride=${{ env.DEPLOYMENT_NAME }} \
            --set fullnameOverride=${{ env.DEPLOYMENT_NAME }} \
            --set ingress.enabled=true \
            --set ingress.className=nginx \
            --set service.type=ClusterIP \
            --set resources.requests.memory=256Mi \
            --set resources.requests.cpu=250m \
            --set resources.limits.memory=512Mi \
            --set resources.limits.cpu=500m \
            --set replicaCount=2 \
            --set autoscaling.enabled=true \
            --set autoscaling.minReplicas=2 \
            --set autoscaling.maxReplicas=10 \
            --set autoscaling.targetCPUUtilizationPercentage=70 \
            --set podSecurityContext.runAsNonRoot=true \
            --set podSecurityContext.runAsUser=1000 \
            --set securityContext.allowPrivilegeEscalation=false \
            --set securityContext.capabilities.drop[0]=ALL \
            --set securityContext.readOnlyRootFilesystem=true \
            --wait \
            --timeout=10m

      - name: Apply Kubernetes manifests
        run: |
          # Apply any additional Kubernetes resources
          if [[ -d "./2-container-orchestration/kubernetes-gke/manifests/web-app" ]]; then
            kubectl apply -f ./2-container-orchestration/kubernetes-gke/manifests/web-app \
              --namespace ${{ needs.setup.outputs.namespace }}
          fi
          
          # Update deployment image
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} \
            ${{ env.DEPLOYMENT_NAME }}=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ needs.setup.outputs.image_tag }} \
            --namespace ${{ needs.setup.outputs.namespace }}

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} \
            --namespace ${{ needs.setup.outputs.namespace }} \
            --timeout=600s

      - name: Get service URL
        id: get-url
        run: |
          # Try to get ingress URL first
          INGRESS_IP=$(kubectl get ingress ${{ env.DEPLOYMENT_NAME }} \
            --namespace ${{ needs.setup.outputs.namespace }} \
            -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          
          if [[ -n "$INGRESS_IP" ]]; then
            echo "service_url=http://$INGRESS_IP" >> $GITHUB_OUTPUT
          else
            # Fallback to service external IP
            SERVICE_IP=$(kubectl get service ${{ env.DEPLOYMENT_NAME }} \
              --namespace ${{ needs.setup.outputs.namespace }} \
              -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
            
            if [[ -n "$SERVICE_IP" ]]; then
              echo "service_url=http://$SERVICE_IP" >> $GITHUB_OUTPUT
            else
              echo "service_url=Service not externally accessible" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Verify deployment
        run: |
          echo "Deployment completed successfully!"
          echo "Namespace: ${{ needs.setup.outputs.namespace }}"
          echo "Deployment: ${{ env.DEPLOYMENT_NAME }}"
          echo "Image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ needs.setup.outputs.image_tag }}"
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          
          # Get pod status
          kubectl get pods -l app.kubernetes.io/name=${{ env.DEPLOYMENT_NAME }} \
            --namespace ${{ needs.setup.outputs.namespace }}
          
          # Get deployment status
          kubectl get deployment ${{ env.DEPLOYMENT_NAME }} \
            --namespace ${{ needs.setup.outputs.namespace }}

      - name: Run smoke tests
        run: |
          # Basic connectivity test
          POD_NAME=$(kubectl get pods -l app.kubernetes.io/name=${{ env.DEPLOYMENT_NAME }} \
            --namespace ${{ needs.setup.outputs.namespace }} \
            -o jsonpath='{.items[0].metadata.name}')
          
          if [[ -n "$POD_NAME" ]]; then
            echo "Running smoke tests on pod: $POD_NAME"
            
            # Test if application is responding
            kubectl exec $POD_NAME --namespace ${{ needs.setup.outputs.namespace }} -- \
              curl -f http://localhost:3000/health || echo "Health check endpoint not available"
            
            # Check logs for any immediate errors
            kubectl logs $POD_NAME --namespace ${{ needs.setup.outputs.namespace }} --tail=50
          else
            echo "No pods found for smoke testing"
          fi

      - name: Post deployment notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "text": "GKE Deployment ${{ job.status }}",
              "attachments": [{
                "color": "${{ job.status }}" === "success" ? "good" : "danger",
                "fields": [{
                  "title": "Environment",
                  "value": "${{ needs.setup.outputs.environment }}",
                  "short": true
                }, {
                  "title": "Namespace",
                  "value": "${{ needs.setup.outputs.namespace }}",
                  "short": true
                }, {
                  "title": "Image Tag",
                  "value": "${{ needs.setup.outputs.image_tag }}",
                  "short": true
                }, {
                  "title": "Service URL",
                  "value": "${{ steps.get-url.outputs.service_url }}",
                  "short": false
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup job for development environments
  cleanup:
    runs-on: ubuntu-latest
    if: needs.setup.outputs.environment == 'dev' && github.event_name == 'pull_request' && github.event.action == 'closed'
    needs: [setup]
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ needs.setup.outputs.cluster_name }} \
            --region ${{ env.GKE_ZONE }} \
            --project ${{ env.PROJECT_ID }}

      - name: Cleanup development resources
        run: |
          # Delete namespace and all resources within it
          kubectl delete namespace ${{ needs.setup.outputs.namespace }} --ignore-not-found=true
          echo "Cleaned up development environment: ${{ needs.setup.outputs.namespace }}" 